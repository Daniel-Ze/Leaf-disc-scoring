#!/bin/bash

# Version 0.2
# license http://creativecommons.org/licenses/by-nc-sa/4.0/

# Be fancy
R='\033[0;31m'
G='\033[0;32m'
Y='\033[0;33m'
NC='\033[0m'
CHECK=${G}'\xE2\x9C\x94\xE2\x9C\x94\xE2\x9C\x94\xE2\x9C\x94'${NC}

home="$(cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"/
miniconda=~/miniconda3/etc/profile.d/conda.sh
keras="keras"
keras_version_expected="2.4.3"

# Check the miniconda3 installation
if [[ -f $miniconda ]]; then
  echo "$miniconda exists."
  source $miniconda
else
  printf "[ ${R}error${NC} ]\tCould not find miniconda installation.\n"
  exit 1
fi

# Check the Leaf-disc-install folder
if [[ -d "$home" ]]; then
    printf "[ ${Y}info${NC} ]\tRunning from $home.\n"
  else
    printf "CNN home not found. Make sure to adjust line 4 in the run_classification script.\n"
    exit 1
fi

plot_coords=$home"plot_coords.R"
plot_pheno=$home"plot_pheno.R"
classify_leaf_disc=$home"classify_leaf_disc.py"

helpFunction()
{
  echo ""
  echo "Usage: $( basename -- "$0" ) -f path/to/leaf/disc/dir/ -e Inoculation1 -l model_l_vs_b.h5 -s model_s_vs_no-s.h5 -e keras"
  echo -e "\t-f Path to leaf disc containing folder. Don't forget the / at the end"
  echo -e "\t-e Give your experiment a name"
  echo -e "\t-l Path to custom Keras model: leaf vs background (if not supplied standard model will be used)"
  echo -e "\t-s Path to custom Keras model: sporangia vs no-sporangia (if notsupplied standard model will be used)"
  echo -e "\t-k name of the conda environment with Leaf-disc-scoring dependencies installed (default: keras)"
  echo -e "\t-c Citation reference in BibTex"
  echo -e ""
  exit 1
}

citeThis()
{
echo -e "@article{Zendler2021,
		author = {Zendler, Daniel and Malagol, Nagarjun and Schwandner, Anna and T{\"{o}}pfer, Reinhard and Hausmann, Ludger and Zyprian, Eva},
		doi = {10.3390/agronomy11091768},
		issn = {20734395},
		journal = {Agronomy},
		number = {9},
		pages = {1768},
		title = {{High-throughput phenotyping of leaf discs infected with grapevine downy mildew using shallow convolutional neural networks}},
		volume = {11},
		year = {2021}
	}"
	exit
}

while getopts "ce:f:l:s:k:" opt
do
  case "$opt" in
    c ) citeThis ;;
    e ) parameterE="$OPTARG" ;;
    f ) parameterF="$OPTARG" ;;
    l ) parameterL="$OPTARG" ;;
    s ) parameterS="$OPTARG" ;;
    k ) parameterK="$OPTARG" ;;
    ? ) helpFunction ;;
  esac
done

if [ -z "$parameterK" ]
then
  printf "[ ${Y}warning${NC} ]\tNo conda environment name given. Defaulting to: keras\n"
  parameterK="keras"
fi

conda activate $parameterK

# Get the version number of the installed Keras
keras_version=$(python -c 'import keras; print(keras.__version__)' 2> /dev/null)

# Check if it is installed
if [ -z $keras_version ]
then
  echo $keras_version
  echo -e "\t${R}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!${NC}"
  echo -e "\t${R}!!No Keras installation found in conda environment       !!${NC}"
  echo -e "\t${R}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!${NC}"
  exit 1
else
  # Check if the right version is installed
  if [ "$keras_version" != "$keras_version_expected" ]
  then
    printf "[ ${R}error${NC} ]\tWrong Keras version found. Make sure to install Keras v2.4.3\n"
    exit 1
  else
    printf "[ ${CHECK} ]\tRunning Keras in version: "$keras_version"\n"
  fi
fi

# Check if the specified folder with leaf disc images exists
if [[ -d "$parameterF" ]]; then
    printf "[ ${CHECK} ]\tLeaf disc folder exists.\n"
  else
    helpFunction
fi

# Check if there was a name given for the experiment
if [ -z "$parameterE" ]
then
    RAND_NR=$[ $RANDOM % 5000 + 2500 ]
    printf "[ ${Y}info${NC} ]\tNo experiment name supplied. Using: Experiment${RAND_NR}\n"
    parameterE=Experiment${RAND_NR}
else
    printf "[ ${Y}info${NC} ]\tExperiment name : "$parameterE"\n"
fi

# Check if an alternative CNN1 model was supplied
if [ -z "$parameterL" ]
then
   printf "[ ${Y}info${NC} ]\tNo -l option. Using standard model: CNN1_model.h5\n"
   parameterL=$home"CNN1_model.h5"
fi

#Check if an alternative CNN2 model was supplied
if [ -z "$parameterS" ]
then
   printf "[ ${Y}info${NC} ]\tNo -S option. Using standard model: CNN2_model.h5\n"
   parameterS=$home"CNN2_model.h5"
fi

# Create directories and output files
if ! mkdir $parameterF"results"
then
   printf "[ ${R}error${NC} ]\t${paramterF}results exists. Failed previous run? Manually delete to proceed.\n"
   exit 1
fi
if ! mkdir $parameterF"spo"
then
   printf "[ ${R}error${NC} ]\t${paramterF}spo exists. Failed previous run? Manually delete to proceed.\n"
   exit 1
fi
touch $parameterF"classify_results.txt"
touch $parameterF"error.log"

# Start the python script for clasification
printf "[ ${Y}info${NC} ]\tRunning classify_leaf_disc.py. This might take some time.\n"
if ! python $classify_leaf_disc $parameterF $parameterL $parameterS $parameterE 2> $parameterF"error.log"
then
   print "[ ${R}error${NC} ]\tSomething went wrong while classifying the leaf disc images. Check ${paramterF}error.log\n"
   exit 1
fi

# Plotting the data on the RGB images
printf "[ ${Y}info${NC} ]\tRunning plot_coords.R\n"
coords=$parameterF*.jpg
for f in $coords
do
  printf "[ ${Y}info${NC} ]\t\tPlotting "$(basename -- $f)"\n"
  Rscript $plot_coords -c $f"spo_coord.txt" 2>> $parameterF"error.log"
done

# Plotting the results overview
Rscript $plot_pheno -r $parameterF"classify_results.txt" 2>> $parameterF"error.log"

# Moving everything to a folder
mkdir $parameterF$parameterE

mv $parameterF"results" $parameterF$parameterE
mv $parameterF"spo" $parameterF$parameterE
mv $parameterF"classify_results.txt" $parameterF$parameterE
mv $parameterF"error.log" $parameterF$parameterE

for f in $parameterF*_coord.txt
do
  mv $f $parameterF$parameterE
done
